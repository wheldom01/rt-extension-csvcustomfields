<%INIT>
# FIXE: You seem to have this is exact code in 3 places, needs to be a
# function
# FIXME: needs changing to debug
$RT::Logger->error("Callback activated");

use Data::Dumper;

# We are only interested if the keys containing Rows and Columns
my @Subkeys;
foreach my $key (keys %$ARGSRef) {
    push (@Subkeys, $key) if $key =~ m/--Row\d+-Col\d+/xms;
}

# A simple sort is enough to put them in the correct order
@Subkeys = sort(@Subkeys);

my $CF_hash = {};
my @tmp;
my $value = q{};
my $cf = q{};
my $this_row = 0;
my $previous_row = 0;

# Assemble into a RT FreeForm text format
foreach my $key (@Subkeys) {
    ($cf, $this_row) = $key =~ m/\A         # Match start of string
                                 ([\w\-:]+) # Capture the CustomField
                                 --Row
                                 (\d+)      # Capture the row number
                                /xms;

    # Apply a line ending if we have reached the last column
    if ($this_row > $previous_row) {
        #$value =~ s/,$/\n/;
        $CF_hash->{$cf} =~ s/,$/\n/;
    }
    $previous_row = $this_row;

    # Build the CF csv data and push into a temporary hash
    $CF_hash->{$cf} .= $ARGSRef->{$key} . ",";

    # Remove all the keys as they would cause duplicate data to be added
    delete $ARGSRef->{$key};
}

# Now tidy up and push the CF data back into the ARGSRef
foreach my $key (keys %$CF_hash) {
    # Split contents of hash key into a array and modify as required
    my @lines = split /\n/, $CF_hash->{$key};

    # Strip empty lines and trailing commas then reasemble into multiline
    # string
    @lines = grep { not /^,{1,}$/ } @lines;
    @lines = map { s/,*$/\n/; $_ } @lines;
    $CF_hash->{$key} = join '', @lines;
    $ARGSRef->{$key} = $CF_hash->{$key};
}

</%INIT>
<%ARGS>
$ARGSRef => undef
</%ARGS>
